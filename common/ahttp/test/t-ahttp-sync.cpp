// Copyright (c) Alpaca Core
// SPDX-License-Identifier: MIT
//
#include <ahttp/ahttp.hpp>
#include <vector>
#include <doctest/doctest.h>

TEST_CASE("supports_url") {
    CHECK(ahttp::supports_url("http://example.com"));
    CHECK(ahttp::supports_https() == ahttp::supports_url("https://example.com"));
    CHECK_FALSE(ahttp::supports_url("git://example.com"));
    CHECK_FALSE(ahttp::supports_url("asdf"));
}

TEST_CASE("bad url") {
    CHECK_THROWS(ahttp::get_sync("http://nope-doesnt-exist.co.uk"));
    CHECK_THROWS(ahttp::get_sync("http://httpbin.org/no-such-request"));
    CHECK_THROWS_WITH(ahttp::get_sync("http://httpbin.org/status/500"), "http response status: 500");
}

uint8_t g_expected_buffer[] = {
    0x39, 0x0c, 0x8c, 0x7d, 0x72, 0x47, 0x34, 0x2c, 0xd8, 0x10, 0x0f, 0x2f, 0x6f, 0x77, 0x0d, 0x65,
    0xd6, 0x70, 0xe5, 0x8e, 0x03, 0x51, 0xd8, 0xae, 0x8e, 0x4f, 0x6e, 0xac, 0x34, 0x2f, 0xc2, 0x31,
    0xb7, 0xb0, 0x87, 0x16, 0xeb, 0x3f, 0xc1, 0x28, 0x96, 0xb9, 0x62, 0x23, 0x17, 0x74, 0x94, 0x28,
    0x77, 0x33, 0xc2, 0x8e, 0xe8, 0xba, 0x53, 0xbd, 0xb5, 0x6b, 0x88, 0x24, 0x57, 0x7d, 0x53, 0xec,
    0xc2, 0x8a, 0x70, 0xa6, 0x1c, 0x75, 0x10, 0xa1, 0xcd, 0x89, 0x21, 0x6c, 0xa1, 0x6c, 0xff, 0xca,
    0xea, 0x49, 0x87, 0x47, 0x7e, 0x86, 0xdb, 0xcc, 0xb9, 0x70, 0x46, 0xfc, 0x2e, 0x18, 0x38, 0x4e,
    0x51, 0xd8, 0x20, 0xc5, 0xc3, 0xef, 0x80, 0x05, 0x3a, 0x88, 0xae, 0x39, 0x96, 0xde, 0x50, 0xe8,
    0x01, 0x86, 0x5b, 0x36, 0x98, 0x65, 0x4e, 0xbf, 0x52, 0x00, 0xa5, 0xfa, 0x09, 0x39, 0xb9, 0x9d,
    0x7a, 0x1d, 0x7b, 0x28, 0x2b, 0xf8, 0x23, 0x40, 0x41, 0xf3, 0x54, 0x87, 0xd8, 0x6c, 0x66, 0x9f,
    0xcc, 0xbf, 0xe0, 0xe7, 0x3d, 0x7e, 0x73, 0x20, 0xad, 0x0a, 0x75, 0x70, 0x03, 0x24, 0x1e, 0x75,
    0x22, 0x10, 0xa9, 0x24, 0x79, 0x8e, 0xf8, 0x6d, 0x43, 0xf2, 0x7c, 0xf2, 0xd0, 0x61, 0x30, 0x31,
    0xdc, 0xb5, 0xd8, 0xd2, 0xef, 0x1b, 0x32, 0x1f, 0xce, 0xad, 0x37, 0x7f, 0x62, 0x61, 0xe5, 0x47,
    0xd8, 0x5d, 0x8e, 0xec, 0x7f, 0x26, 0xe2, 0x32, 0x19, 0x07, 0x2f, 0x79, 0x55, 0xd0, 0xf8, 0xf6,
    0x6d, 0xcd, 0x1e, 0x54, 0xc2, 0x01, 0xc7, 0x87, 0xe8, 0x92, 0xd8, 0xf9, 0x4f, 0x61, 0x97, 0x6f,
    0x1d, 0x1f, 0xa0, 0x1d, 0x19, 0xf4, 0x50, 0x1d, 0x29, 0x5f, 0x23, 0x22, 0x78, 0xce, 0x3d, 0x7e,
    0x14, 0x29, 0xd6, 0xa1, 0x85, 0x68, 0xa0, 0x7a, 0x87, 0xca, 0x43, 0x99, 0xea, 0xa1, 0x25, 0x04,
    0xea, 0x33, 0x25, 0x6d, 0x87, 0x43, 0xb2, 0x23, 0x7d, 0xbd, 0x91, 0x50, 0xe0, 0x9a, 0x04, 0x99,
    0x35, 0x44, 0x87, 0x3b, 0x36, 0x4f, 0x8b, 0x90, 0x6b, 0xaf, 0x68, 0x87, 0xfa, 0x80, 0x1a, 0x2f,
    0xd8, 0x8d, 0x16, 0x01, 0xaa, 0x42, 0x86, 0x52, 0xe2, 0xda, 0x04, 0x39, 0x26, 0x4c, 0x12, 0xbd,
    0x4b, 0xdc, 0x41, 0x15, 0x9d, 0xba, 0x14, 0xb7, 0x6b, 0x7f, 0x34, 0xb5, 0xd0, 0x4f, 0x79, 0x53,
    0x5a, 0xd3, 0x0c, 0x5b, 0xaa, 0xd2, 0x7f, 0x88, 0x51, 0x37, 0xc3, 0x13, 0xf0, 0x71, 0x66, 0xeb,
    0xb3, 0x9c, 0x74, 0x72, 0x0c, 0x62, 0xcc, 0xa8, 0x8e, 0x23, 0x8e, 0xb3, 0xcc, 0xa9, 0x0e, 0x3b,
    0x85, 0x5b, 0x87, 0x13, 0x37, 0xde, 0xb0, 0xa0, 0xdf, 0x3b, 0xc5, 0x61, 0x82, 0x16, 0xdf, 0x00,
    0x64, 0xba, 0xdc, 0x23, 0xa9, 0xa0, 0x3f, 0x99, 0x9e, 0xd1, 0xa7, 0xce, 0x97, 0x41, 0x62, 0xd7,
    0xc2, 0x59, 0x9a, 0xcf, 0x00, 0x9b, 0x92, 0x6b, 0xdc, 0xa4, 0xee, 0xe2, 0xe2, 0x6d, 0xf2, 0x56,
    0x2b, 0x91, 0xab, 0x2f, 0x78, 0x9e, 0x73, 0x65, 0x4b, 0x0c, 0x17, 0x7d, 0xf3, 0x25, 0xe9, 0xd4,
    0x63, 0xc4, 0xfd, 0xcc, 0x7c, 0x4b, 0x02, 0x36, 0xd9, 0x70, 0x5a, 0xed, 0x19, 0x7f, 0x3e, 0xe9,
    0x44, 0xed, 0xa2, 0xe2, 0xda, 0xe4, 0x51, 0xf3, 0xe6, 0x84, 0x7e, 0x8d, 0xf8, 0x7a, 0x8c, 0xe1,
    0x27, 0x92, 0x78, 0x8b, 0xab, 0xa3, 0x29, 0x46, 0x4d, 0x76, 0xc4, 0x4e, 0x6d, 0x20, 0xd4, 0xd0,
    0xa9, 0xee, 0xd4, 0x1f, 0x69, 0xd7, 0xc7, 0x0a, 0xc2, 0xf4, 0x03, 0xb4, 0x98, 0xc7, 0xd6, 0x70,
    0xf9, 0x70, 0x8b, 0xdf, 0xf8, 0x0e, 0xc7, 0xac, 0xcf, 0x54, 0xef, 0x41, 0x0d, 0xc9, 0x0d, 0x2a,
    0xdb, 0x45, 0xec, 0x5d, 0x19, 0x85, 0xc2, 0xa7, 0x6c, 0xe8, 0xa7, 0xac, 0xc2, 0x8e, 0xd7, 0x81
};
std::span expected_buffer(g_expected_buffer);

bool is_expectected(std::span<uint8_t> span, size_t offset = 0) {
    if (span.size() + offset > expected_buffer.size()) return false;
    for (size_t i = 0; i < span.size(); ++i) {
        if (span[i] != expected_buffer[i + offset]) return false;
    }
    return true;
}

TEST_CASE("just get") {
    auto gen = ahttp::get_sync("http://httpbin.org/bytes/128?seed=42");
    auto size = gen.size();
    CHECK(size.value_or(0) == 128);
    std::vector<uint8_t> data(128);
    auto chunk = gen.get_next_chunk(data);
    CHECK(chunk.size() == 128);
    CHECK(gen.done());
    CHECK(is_expectected(chunk));
    CHECK(is_expectected(data));
}

TEST_CASE("chunked get") {
    auto gen = ahttp::get_sync("http://httpbin.org/bytes/512?seed=42");
    auto size = gen.size();
    CHECK(size.value_or(0) == 512);

    std::vector<uint8_t> data;
    while (!gen.done()) {
        std::vector<uint8_t> buf(150 + rand()%100);
        auto chunk = gen.get_next_chunk(buf);
        data.insert(data.end(), chunk.begin(), chunk.end());
    }
    CHECK(data.size() == 512);
    CHECK(is_expectected(data));
}

TEST_CASE("redirect once") {
    auto gen = ahttp::get_sync("http://httpbin.org/redirect-to?url=http%3A%2F%2Fhttpbin.org%2Fbytes%2F64%3Fseed%3D42");
    auto size = gen.size();
    CHECK(size.value_or(0) == 64);
    std::vector<uint8_t> data(64);
    auto chunk = gen.get_next_chunk(data);
    CHECK(chunk.size() == 64);
    CHECK(gen.done());
    CHECK(is_expectected(chunk));
}

TEST_CASE("redirect more") {
    auto gen = ahttp::get_sync("http://httpbin.org/redirect/5");
    auto size = gen.size();
    CHECK(!!size);
    std::string data;
    data.resize(*gen.size());
    auto chunk = gen.get_next_chunk(std::span(reinterpret_cast<uint8_t*>(data.data()), data.size()));
    CHECK(chunk.size() == data.size());
    CHECK(gen.done());

    // data should be a json with our request
    // {
    //   "args": {},
    //   "headers": {
    //      "Accept": "*/*",
    //      "Host": "httpbin.org",
    //      "User-Agent": "ac-file-download/1.0.0",
    //      "X-Amzn-Trace-Id": "Root=<guid>"
    //   },
    //   "origin": "<ip address>",
    //   "url": "http://httpbin.org/get"
    // }
    // so, check for some key fields
    // C++23: use contains instead of find
    CHECK(data.find(R"json("Host": "httpbin.org")json") != std::string::npos);
    CHECK(data.find(R"json("User-Agent": "ac-file-download/)json") != std::string::npos);
    CHECK(data.find(R"json("url": "http://httpbin.org/get")json") != std::string::npos);
}

TEST_CASE("stream chunked") {
    auto gen = ahttp::get_sync("http://httpbin.org/stream-bytes/128?seed=42");
    auto size = gen.size();
    CHECK_FALSE(size); // size should not be available on stream

    std::vector<uint8_t> data;
    while (!gen.done()) {
        std::vector<uint8_t> buf(33);
        auto chunk = gen.get_next_chunk(buf);
        data.insert(data.end(), chunk.begin(), chunk.end());
    }
    CHECK(data.size() == 128);
    CHECK(is_expectected(data));
}
